// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefeshToken = `-- name: CreateRefeshToken :one
INSERT INTO refresh_tokens (token, expires_at, created_at, updated_at, user_id, revoked_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING token
`

type CreateRefeshTokenParams struct {
	Token     string
	ExpiresAt time.Time
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	RevokedAt sql.NullTime
}

func (q *Queries) CreateRefeshToken(ctx context.Context, arg CreateRefeshTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createRefeshToken,
		arg.Token,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.RevokedAt,
	)
	var token string
	err := row.Scan(&token)
	return token, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token, expires_at, created_at, updated_at, user_id, revoked_at
FROM refresh_tokens
WHERE token = $1
`

type GetRefreshTokenRow struct {
	Token     string
	ExpiresAt time.Time
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	RevokedAt sql.NullTime
}

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (GetRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i GetRefreshTokenRow
	err := row.Scan(
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET revoked_at = $2,
    updated_at = $3
WHERE token = $1
`

type RevokeRefreshTokenParams struct {
	Token     string
	RevokedAt sql.NullTime
	UpdatedAt time.Time
}

func (q *Queries) RevokeRefreshToken(ctx context.Context, arg RevokeRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, arg.Token, arg.RevokedAt, arg.UpdatedAt)
	return err
}
